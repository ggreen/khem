<?xml version="1.0" encoding="UTF-8"?>
<beans 
	xmlns="http://www.springframework.org/schema/beans"
	xmlns:aop="http://www.springframework.org/schema/aop" 
	xmlns:p="http://www.springframework.org/schema/p"
	xmlns:batch="http://www.springframework.org/schema/batch"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.springframework.org/schema/aop 
	   http://www.springframework.org/schema/aop/spring-aop-2.0.xsd
		http://www.springframework.org/schema/batch 
		http://www.springframework.org/schema/batch/spring-batch-2.2.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd">

    <import resource="batch_service_factory.xml"/>
    <import resource="batch-molecules.xml"/>

   
	<bean id="rowMapper" class="nyla.solutions.dao.spring.batch.DataRowMapperSetter" scope="prototype">
	</bean>
	<bean id="itemPreparedStatementSetter" class="nyla.solutions.dao.spring.batch.DataRowMapperSetter" scope="prototype">	
	</bean>
	
<!--  batch:job-repository/-->
<bean id="jobRepository"
  class="org.springframework.batch.core.repository.support.MapJobRepositoryFactoryBean">
    <property name="transactionManager" ref="transactionManager"/>
</bean>

<bean id="transactionManager" class="org.springframework.batch.support.transaction.ResourcelessTransactionManager">
</bean>
		<!-- property name="transactionManager" ref="transactionManager"/-->
		<!--  property name="dataSource" ref="dataSource"/-->
		<!--  property name="isolationLevelForCreate" value="ISOLATION_READ_COMMITTED"/-->
	
	<bean id="jobLauncher"
		class="org.springframework.batch.core.launch.support.SimpleJobLauncher">
		<property name="jobRepository" ref="jobRepository" />
	</bean>
	

	<!-- ************************************************** -->
	<!-- Clear files in report directory -->

     
    <bean id="taskExecutor" class="org.springframework.core.task.SimpleAsyncTaskExecutor" />
    
 
   <!-- ************************************************** -->
	<!-- Error Handling common -->
	<bean id="BATCH_ERROR_LISTENER" class="nyla.solutions.dao.spring.batch.SpringBatchErrorListener">
	    <property name="readErrorCmd" ref="emailCommandError"/>
		<property name="processErrorCmd" ref="emailCommandError"/>
		<property name="writeErrorCmd" ref="emailCommandError"/>
	    <property name="faultService" ref="faultService"/>
    </bean>
	<bean  id="emailCommandError" class="nyla.solutions.global.patterns.command.net.EmailCommand">
	    		<property name="subject" value="${nyla.solutions.global.exception.EmailFaultCommand.SUBJECT}"/>
	    		<property name="to" value="${nyla.solutions.global.exception.EmailFaultCommand.TO}"/>
	    		<property name="textDecorator">
	    			<bean class="nyla.solutions.global.exception.fault.FaultFormatTextDecorator">
	    				<property name="templateName" value="${nyla.solutions.global.exception.EmailFaultCommand.TEMPLATE_NAME}"/>
	   
	    			</bean>
	    		</property>
	    	</bean>
	<bean id="faultService" class="nyla.solutions.global.exception.fault.FaultMgr">
				<property name="faultErrorMap">
					<map>
						<entry>
							<key>
								<value>org.springframework.batch.core.JobExecutionException</value>
							</key>
								<bean class="nyla.solutions.global.exception.fault.FaultError">
									<constructor-arg index="0" type="java.lang.String" value="0001"/>
								    <constructor-arg index="1" type="java.lang.String" value="BATCH"/>
								</bean>
						</entry>
						<entry>
							<key>
								<value>org.springframework.batch.core.step.FatalStepExecutionException</value>
							</key>
							<bean class="nyla.solutions.global.exception.fault.FaultError">
									<constructor-arg  index="0" type="java.lang.String" value="0002"/>
								    <constructor-arg index="1" type="java.lang.String" value="BATCH"/>
								</bean>
						</entry>
					</map>
				</property>
			</bean>
</beans>